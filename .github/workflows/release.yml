name: release

on:
  workflow_dispatch:
    inputs:
      version_type:
        description: "Select version bump type"
        required: true
        default: "minor"
        type: choice
        options:
          - major
          - minor
          - patch

jobs:
  release:
    runs-on: ubuntu-latest
    timeout-minutes: 25
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Git user
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"

      - name: Get Latest Tag and Increment
        id: versioning
        uses: actions/github-script@v6
        with:
          script: |
            const { data: tags } = await github.rest.repos.listTags({
              owner: context.repo.owner,
              repo: context.repo.repo
            });

            let latestTag = tags.length > 0 ? tags[0].name : "v0.1.0";
            latestTag = latestTag.replace(/^v*/, ""); // Remove 'v' prefix

            let [major, minor, patch] = latestTag.split('.').map(Number);
            let versionType = "${{ github.event.inputs.version_type }}";

            switch (versionType) {
              case "major": major++; minor = 0; patch = 0; break;
              case "minor": minor++; patch = 0; break;
              case "patch": patch++; break;
              default: throw new Error("Invalid version type");
            }

            let newTag = `v${major}.${minor}.${patch}`;
            console.log(`New version: ${newTag}`);

            core.setOutput("new_tag", newTag);

      - name: Create and Push New Tag
        run: |
          git tag -a ${{ steps.versioning.outputs.new_tag }} -m "Release ${{ steps.versioning.outputs.new_tag }}"
          git push origin ${{ steps.versioning.outputs.new_tag }}

      - name: Publish Release Notes
        uses: release-drafter/release-drafter@v5
        with:
          config-name: release-drafter.yml
          publish: true
          name: "${{ steps.versioning.outputs.new_tag }}"
          tag: "${{ steps.versioning.outputs.new_tag }}"
          version: "${{ steps.versioning.outputs.new_tag }}"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Dispatch Deploy
        uses: peter-evans/repository-dispatch@v2
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          repository: Mikyas1/ci-api-test
          event-type: deploy
          client-payload: '{"version": "${{ steps.versioning.outputs.new_tag }}"}'
