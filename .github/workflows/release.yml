name: release

on:
  workflow_dispatch:
    inputs:
      version_type:
        description: "Select version bump type"
        required: true
        default: "minor"
        type: choice
        options:
          - major
          - minor
          - patch

jobs:
  release:
    runs-on: ubuntu-latest
    timeout-minutes: 25
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Git user
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"

      - name: Get Latest Version Tag
        id: get_version
        run: |
          git fetch --tags --force

          LATEST_TAG=$(git tag --sort=-v:refname | head -n 1)

          if [[ -z "$LATEST_TAG" ]]; then
              LATEST_TAG="v0.1.0"
          fi

          echo "Latest tag: $LATEST_TAG"

          # Remove "v" prefix
          # Remove ALL leading 'v' characters to get a clean version number
          LATEST_VERSION=$(echo "$LATEST_TAG" | sed 's/^v*//')

          # Extract major, minor, patch
          IFS='.' read -r MAJOR MINOR PATCH <<< "$LATEST_VERSION"

          # Determine which version to increment
          case "${{ github.event.inputs.version_type }}" in
              major) NEW_VERSION="$((MAJOR+1)).0.0" ;;
              minor) NEW_VERSION="$MAJOR.$((MINOR+1)).0" ;;
              patch) NEW_VERSION="$MAJOR.$MINOR.$((PATCH+1))" ;;
              *) echo "Invalid version type!"; exit 1 ;;
          esac

          echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_ENV
          echo "New version: $NEW_VERSION"

      - name: Create and Push New Tag
        run: |
          NEW_TAG="${{ env.NEW_VERSION }}"
          git tag -a $NEW_TAG -m "Release $NEW_TAG"

          git push origin $NEW_TAG

      - name: Publish Release Notes
        uses: release-drafter/release-drafter@v5
        with:
          config-name: release-drafter.yml
          publish: true
          name: "v${{ env.NEW_VERSION }}"
          tag: "${{ env.NEW_VERSION }}"
          version: "v${{ env.NEW_VERSION }}"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
